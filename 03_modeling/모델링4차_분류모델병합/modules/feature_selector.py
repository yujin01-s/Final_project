# 선별된 피처 리스트 정리

import numpy as np
import pandas as pd

# 나눗셈 함수
def safe_div(a, b):
    return np.where(b != 0, a / b, 0)

def get_required_base_columns_for_derived_features():
    """
    공통 파생변수 생성을 위해 반드시 필요한 원본 컬럼 리스트 반환
    (generate_common_derived_features() 함수 기반)
    """
    base_cols = [
        # 정상청구 / 입금
        "정상청구원금_B5M", "정상청구원금_B2M", "정상청구원금_B0M",
        "정상입금원금_B0M", "정상입금원금_B5M",

        # 청구 흐름
        "청구금액_B0", "청구금액_R3M",

        # 카드 소비 트렌드
        "이용금액_R3M_신용체크", "이용금액_R3M_신용",
        "이용건수_신용_B0M", "이용금액_일시불_B0M",

        # 카드론 및 평잔
        "잔액_카드론_B0M", "잔액_카드론_B1M",
        "평잔_일시불_3M", "평잔_6M",

        # 신판CA 소진율
        "잔액_신판ca최대한도소진율_r3m", "잔액_신판ca최대한도소진율_r6m",
        "잔액_신판ca평균한도소진율_r3m", "잔액_신판ca평균한도소진율_r6m",

        # 포인트/혜택/무이자
        "포인트_마일리지_월적립_B0M", "포인트_포인트_월적립_B0M",
        "할인금액_R3M", "이용금액_할부_무이자_R3M", "이용금액_할부_무이자_R12M",

        # 연회비
        "기본연회비_B0M", "제휴연회비_B0M",

        # 해외겸용
        "보유여부_해외겸용_본인", "이용여부_3M_해외겸용_본인",

        # 선결제 성향
        "이용금액_선결제_R6M"
    ]
    return base_cols


def generate_common_derived_features(df):
    """
    입력된 df에서 파생변수 생성에 필요한 컬럼만 추출하고,
    파생변수를 생성하여 df에 추가한 새로운 DataFrame 반환
    """
    required_cols = get_required_base_columns_for_derived_features()
    missing_cols = [col for col in required_cols if col not in df.columns]
    if missing_cols:
        raise ValueError(f"필수 컬럼 누락: {missing_cols}")

    # 2. 파생변수 생성
    # 정상청구 / 입금 관련 파생
    df["정상청구원금_증감_B5M_B2M"] = df["정상청구원금_B5M"] - df["정상청구원금_B2M"]
    df["정상청구원금_증감률_B5M_B2M"] = df["정상청구원금_증감_B5M_B2M"] / (df["정상청구원금_B2M"] + 1e-6)
    df["정상청구원금_청구비중_B5M"] = df["정상청구원금_B5M"] / (df["청구금액_B0"] + 1e-6)
    df["정상청구원금_입금비중_B5M"] = df["정상청구원금_B5M"] / (df["정상입금원금_B0M"] + 1e-6)
    df["정상청구원금_단기증감률"] = (df["정상청구원금_B0M"] - df["정상청구원금_B2M"]) / (df["정상청구원금_B2M"] + 1e-6)
    df["정상청구원금_중기증감률"] = (df["정상청구원금_B0M"] - df["정상청구원금_B5M"]) / (df["정상청구원금_B5M"] + 1e-6)
    df["정상입금_증감_B0M_B5M"] = df["정상입금원금_B0M"] - df["정상입금원금_B5M"]
    df["정상입금_증감률_B0M_B5M"] = df["정상입금_증감_B0M_B5M"] / (df["정상입금원금_B5M"] + 1e-6)

    # 청구 흐름 기반
    df["청구금액_단기비중"] = df["청구금액_B0"] / (df["청구금액_R3M"] / 3 + 1e-6)
    df["청구금액_단기증가율"] = (df["청구금액_B0"] - df["청구금액_R3M"] / 3) / (df["청구금액_R3M"] / 3 + 1e-6)

    # 카드 소비 트렌드
    df["신용체크_이용비율_R3M"] = df["이용금액_R3M_신용체크"] / (df["이용금액_R3M_신용"] + 1e-6)
    df["일시불_이용비중"] = df["이용금액_일시불_B0M"] / (df["이용금액_R3M_신용"] + 1e-6)
    df["신용카드_이용건당금액"] = df["이용금액_R3M_신용"] / (df["이용건수_신용_B0M"] + 1e-6)

    # 카드론 및 평잔 흐름
    df["카드론_잔액_B0M_증가율"] = (df["잔액_카드론_B0M"] - df["잔액_카드론_B1M"]) / (df["잔액_카드론_B1M"] + 1e-6)
    df["일시불_평잔_장단기차"] = df["평잔_일시불_3M"] - df["평잔_6M"]
    
    # 신판CA 한도소진율 추세
    df["신판CA_소진율_장단기차"] = df["잔액_신판ca최대한도소진율_r3m"] - df["잔액_신판ca최대한도소진율_r6m"]
    df["신판CA_평균소진율_비중"] = df["잔액_신판ca평균한도소진율_r3m"] / (df["잔액_신판ca평균한도소진율_r6m"] + 1e-6)

    # 혜택, 포인트, 무이자 관련
    df["포인트_월적립합산_B0M"] = df["포인트_마일리지_월적립_B0M"] + df["포인트_포인트_월적립_B0M"] 
    df["할인비율_R3M"] = df["할인금액_R3M"] / (df["청구금액_R3M"] + 1e-6)
    df["무이자_장단기비율"] = df["이용금액_할부_무이자_R3M"] / (df["이용금액_할부_무이자_R12M"] / 4 + 1e-6) 
    df["연회비_제휴비중"] = df["제휴연회비_B0M"] / (df["기본연회비_B0M"] + df["제휴연회비_B0M"] + 1e-6) # 연회비 구조
    df["해외겸용_사용비율"] = df["이용여부_3M_해외겸용_본인"] / (df["보유여부_해외겸용_본인"] + 1e-6) # 해외겸용 사용성
    df["이용금액_선결제비율"] = df["이용금액_선결제_R6M"] / (df["이용금액_R3M_신용"] + 1e-6) # 선결제 성향

    print("✔️ 파생변수 생성 완료.")
    return df

rfm_base_columns = [
        '입회경과개월수_신용',
        '이용건수_신용_R6M', '이용건수_체크_R6M',
        '이용금액_일시불_R6M', '이용금액_할부_R6M',
        '이용금액_CA_R6M', '이용금액_체크_R6M', '이용금액_카드론_R6M'
    ]

def generate_rfm_features_original(df,
                                   recency_cols=['입회경과개월수_신용'],
                                   frequency_cols=['이용건수_신용_R6M', '이용건수_체크_R6M'],
                                   monetary_cols=['이용금액_일시불_R6M', '이용금액_할부_R6M', '이용금액_CA_R6M',
                                                  '이용금액_체크_R6M', '이용금액_카드론_R6M']):
    df = df.copy()

    # Recency는 단일 컬럼 접근, 음수 0으로 교체
    df['Recency'] = df[recency_cols[0]].apply(lambda x: max(x, 0))

    # Frequency와 Monetary는 여러 컬럼 합산 후 음수 0으로 교체
    df['Frequency'] = df[frequency_cols].sum(axis=1).apply(lambda x: max(x, 0))
    df['Monetary'] = df[monetary_cols].sum(axis=1).apply(lambda x: max(x, 0))

    # 분위수 점수 부여 (Recency는 오래될수록 좋은 고객으로 1~4 점수 부여)
    df['R_score'] = pd.qcut(df['Recency'], 4, labels=[1, 2, 3, 4], duplicates='drop')

    # Frequency, Monetary는 높을수록 점수 높게 부여
    df['F_score'] = pd.qcut(df['Frequency'], 4, labels=[1, 2, 3, 4], duplicates='drop')
    df['M_score'] = pd.qcut(df['Monetary'], 4, labels=[1, 2, 3, 4], duplicates='drop')

    # RFM 점수 문자열 결합
    df['RFM_score'] = df['R_score'].astype(str) + df['F_score'].astype(str) + df['M_score'].astype(str)

    # 세그먼트 분류
    def classify_segment(row):
        r, f, m = int(row['R_score']), int(row['F_score']), int(row['M_score'])
        if r >= 3 and f >= 3 and m >= 3:
            return 'High'
        elif r >= 2 and f >= 2 and m >= 2:
            return 'Medium'
        else:
            return 'Low'

    df['RFM_segment'] = df.apply(classify_segment, axis=1)
    print("✔️ RFM 파생변수 생성 완료")
    summarize_rfm(df)
    return df

def summarize_rfm(df):
    print("=== RFM 변수 요약 ===")
    for col in ['Recency', 'Frequency', 'Monetary', 'R_score', 'F_score', 'M_score']:
        print(f"\n-- {col} 통계 --")
        print(df[col].describe())
        print(f"값 분포:\n{df[col].value_counts().sort_index()}")
    
    print("\n-- RFM_score 분포 --")
    print(df['RFM_score'].value_counts().sort_index())
    
    print("\n-- RFM_segment 분포 --")
    print(df['RFM_segment'].value_counts())

rfm_feature_cols = [
    'Recency', 'Frequency', 'Monetary',
    'R_score', 'F_score', 'M_score',
    'RFM_score', 'RFM_segment'
]

# CD 파생변수 생성
def generate_cd_derived_features(df):
    """
    CD 관련 파생변수 생성
    컬럼이 존재하지 않으면 해당 파생변수는 생성하지 않음
    """
    df = df.copy()

    # 안전한 나눗셈 함수
    def safe_div(a, b):
        return np.where(b != 0, a / b, 0)

    # 각 파생변수 생성 전 컬럼 존재 여부 확인
    if {'이용금액_오프라인_B0M', '이용금액_오프라인_R6M'}.issubset(df.columns):
        df['오프라인_소비급등비율'] = safe_div(df['이용금액_오프라인_B0M'], df['이용금액_오프라인_R6M'] / 6)

    if {'이용금액_일시불_B0M', '최대이용금액_일시불_R12M'}.issubset(df.columns):
        df['일시불_최근성지표'] = safe_div(df['이용금액_일시불_B0M'], df['최대이용금액_일시불_R12M'] + 1)

    if {'이용금액_R3M_신용', '최대이용금액_일시불_R12M'}.issubset(df.columns):
        df['소비_평균대최대비율'] = safe_div((df['이용금액_R3M_신용'] + 1) / 3, df['최대이용금액_일시불_R12M'] + 1)

    if {'정상청구원금_B0M', '정상청구원금_B5M'}.issubset(df.columns):
        df['청구_최근성지표'] = safe_div(df['정상청구원금_B0M'], df['정상청구원금_B5M'] + 1)

    if {'잔액_신판평균한도소진율_r6m', '잔액_신판ca평균한도소진율_r6m'}.issubset(df.columns):
        df['소진율_차이'] = df['잔액_신판평균한도소진율_r6m'] - df['잔액_신판ca평균한도소진율_r6m']

    if {'_1순위카드이용금액', '이용금액_R3M_신용', '이용금액_R3M_신용체크'}.issubset(df.columns):
        df['카드집중도'] = safe_div(df['_1순위카드이용금액'], df['이용금액_R3M_신용'] + df['이용금액_R3M_신용체크'] + 1)

    if {'정상입금원금_B5M', '정상청구원금_B5M'}.issubset(df.columns):
        df['입금청구비율'] = safe_div(df['정상입금원금_B5M'], df['정상청구원금_B5M'] + 1)

    if {'이용금액_일시불_B0M', '평잔_일시불_6M'}.issubset(df.columns):
        df['일시불_금액비율'] = safe_div(df['이용금액_일시불_B0M'], df['평잔_일시불_6M'] + 1)

    if {'RV일시불이자율_할인전', 'CA이자율_할인전'}.issubset(df.columns):
        df['할인전이자율_평균'] = (df['RV일시불이자율_할인전'] + df['CA이자율_할인전']) / 2

    return df


def generate_e_features(df):
    """
    E 관련 추가 파생변수 생성 (상관계수 및 핵심 피처 기반)
    - 컬럼 존재 여부 체크 후 생성 (KeyError 방지)
    """
    df = df.copy()

    # ▶ 신용카드 이용량 변화
    if '이용건수_신용_R12M' in df.columns and '이용건수_신용_R6M' in df.columns:
        df['신용이용건수_증가량'] = df['이용건수_신용_R12M'] - df['이용건수_신용_R6M']

    # ▶ 최근 일시불 집중 비율
    if '이용금액_일시불_B0M' in df.columns and '이용금액_일시불_R6M' in df.columns:
        df['일시불이용금액_최근비중'] = safe_div(df['이용금액_일시불_B0M'], df['이용금액_일시불_R6M'] + 1)

    # ▶ 카드론 의존도
    if '잔액_카드론_B0M' in df.columns and '평잔_카드론_6M' in df.columns:
        df['카드론_의존도'] = safe_div(df['잔액_카드론_B0M'], df['평잔_카드론_6M'] + 1)

    # ▶ 카드론 최근 급증 지표
    if '잔액_카드론_B0M' in df.columns and '잔액_카드론_B3M' in df.columns:
        df['카드론_급증지표'] = df['잔액_카드론_B0M'] - df['잔액_카드론_B3M']

    # ▶ 정상청구 비율
    if '정상청구원금_B0M' in df.columns and '청구금액_B0' in df.columns:
        df['정상청구_비율'] = safe_div(df['정상청구원금_B0M'], df['청구금액_B0'] + 1)

    # ▶ 정상청구 추세 변화량
    if '정상청구원금_B0M' in df.columns and '정상청구원금_B5M' in df.columns:
        df['정상청구_추세'] = df['정상청구원금_B0M'] - df['정상청구원금_B5M']

    # ▶ 리볼빙 의존 비율
    if '잔액_리볼빙일시불이월_B0M' in df.columns and 'RV_평균잔액_R3M' in df.columns:
        df['리볼빙_잔액비율'] = safe_div(df['잔액_리볼빙일시불이월_B0M'], df['RV_평균잔액_R3M'] + 1)

    # ▶ 앱 이용 강도
    if '방문횟수_앱_B0M' in df.columns and '방문일수_앱_B0M' in df.columns:
        df['방문빈도_앱'] = safe_div(df['방문횟수_앱_B0M'], df['방문일수_앱_B0M'] + 1)

    # ▶ 주 사용 카드 집중도
    if '_1순위카드이용금액' in df.columns and '이용금액_일시불_R3M' in df.columns:
        df['일시불_주사용카드집중도'] = safe_div(df['_1순위카드이용금액'], df['이용금액_일시불_R3M'] + 1)

    return df


def generate_vif_derived_features(df):
    """
    📌 VIF 상위 변수 기반 파생변수 생성 및 원본 변수 제거
    - "_minus_", "_div_" 파생변수 생성 (컬럼 존재하는 경우만)
    - 방문빈도 및 포인트 변화량 생성
    - 다중공선성 유발 원본 변수 제거
    """
    import numpy as np

    df = df.copy()

    diff_ratio_pairs = [
        ("이용건수_신판_R12M", "이용건수_신용_R12M"),
        ("이용건수_일시불_R12M", "이용건수_신판_R12M"),
        ("이용건수_일시불_R12M", "이용건수_신용_R12M"),
        ("잔액_신판평균한도소진율_r3m", "잔액_신판최대한도소진율_r3m"),
        ("잔액_카드론_B1M", "잔액_카드론_B0M"),
        ("잔액_신판ca최대한도소진율_r3m", "잔액_신판ca평균한도소진율_r3m"),
        ("포인트_마일리지_건별_R3M", "포인트_마일리지_건별_B0M"),
        ("방문횟수_앱_B0M", "방문일수_앱_B0M"),
        ("방문횟수_PC_B0M", "방문일수_PC_B0M"),
        ("이용금액_일시불_R3M", "이용금액_일시불_B0M"),
        ("이용금액_일시불_R3M", "이용금액_일시불_R6M"),
        ("이용건수_신용_R6M", "이용건수_신용_B0M"),
        ("잔액_신판ca최대한도소진율_r6m", "잔액_신판ca평균한도소진율_r6m"),
        ("잔액_신판평균한도소진율_r6m", "잔액_신판최대한도소진율_r6m"),
        ("카드이용한도금액_B2M", "카드이용한도금액_B1M"),
        ("이용후경과월_신판", "이용후경과월_신용"),
        ("평잔_RV일시불_3M", "평잔_RV일시불_6M"),
        ("잔액_현금서비스_B1M", "잔액_현금서비스_B0M"),
        ("잔액_신판평균한도소진율_r3m", "잔액_신판평균한도소진율_r6m"),
        ("포인트_포인트_건별_B0M", "포인트_포인트_건별_R3M"),
        ("잔액_신판최대한도소진율_r3m", "잔액_신판최대한도소진율_r6m"),
        ("포인트_마일리지_월적립_R3M", "포인트_마일리지_월적립_B0M"),
        ("잔액_신판ca최대한도소진율_r3m", "잔액_신판ca최대한도소진율_r6m"),
        ("평잔_CA_6M", "평잔_CA_3M"),
        ("잔액_신판ca평균한도소진율_r6m", "잔액_신판ca평균한도소진율_r3m"),
        ("이용건수_신용_R6M", "이용건수_신판_R12M"),
        ("이용건수_신용_R6M", "이용건수_신용_R12M"),
        ("잔액_신판최대한도소진율_r3m", "잔액_신판평균한도소진율_r6m"),
        ("이용건수_신용_R6M", "이용건수_일시불_R12M"),
        ("잔액_카드론_B1M", "잔액_카드론_B2M"),
    ]

    for col1, col2 in diff_ratio_pairs:
        if col1 in df.columns and col2 in df.columns:
            df[f"{col1}_minus_{col2}"] = df[col1] - df[col2]
            df[f"{col1}_div_{col2}"] = df[col1] / (df[col2].replace(0, np.nan) + 1e-6)

    # 기타 생성
    if "방문횟수_앱_B0M" in df.columns and "방문일수_앱_B0M" in df.columns:
        df["방문빈도_앱"] = df["방문횟수_앱_B0M"] / (df["방문일수_앱_B0M"].replace(0, np.nan) + 1e-6)

    if "포인트_마일리지_건별_R3M" in df.columns and "포인트_마일리지_건별_B0M" in df.columns:
        df["포인트건별_변화량"] = df["포인트_마일리지_건별_R3M"] - df["포인트_마일리지_건별_B0M"]

    # 제거할 컬럼들 (존재하는 경우에만 제거)
    remove_cols = [
        "이용건수_신판_R12M", "이용건수_일시불_R12M",
        "잔액_신판ca최대한도소진율_r3m", "잔액_신판평균한도소진율_r3m",
        "잔액_신판ca최대한도소진율_r6m", "잔액_신판최대한도소진율_r3m",
        "잔액_신판평균한도소진율_r6m", "잔액_신판ca평균한도소진율_r3m",
        "잔액_신판최대한도소진율_r6m", "방문일수_앱_B0M", "포인트_마일리지_건별_B0M",
        "잔액_카드론_B1M", "잔액_카드론_B2M", "방문횟수_PC_B0M", "카드이용한도금액_B1M", "이용카드수_체크_가족"
    ]
    remove_cols_existing = [col for col in remove_cols if col in df.columns]
    df.drop(columns=remove_cols_existing, inplace=True)

    return df


ab_feat = [
    '할부금액_3M_R12M', '이용금액_할부_무이자_R12M', '이용건수_할부_무이자_R12M', '정상입금원금_B0M',
    '이용금액_오프라인_R6M', '정상청구원금_B0M', '이용금액_오프라인_R3M', '_1순위카드이용금액', '평잔_일시불_해외_6M',
    '승인거절건수_입력오류_R3M', '청구금액_R3M', '이용금액_일시불_R12M', '이용금액_할부_무이자_R3M',
    '이용금액_할부_무이자_R6M', '정상입금원금_B5M', '이용금액_할부_R12M', '마일_적립포인트_R3M',
    '정상청구원금_B2M', '포인트_마일리지_환산_B0M', '청구금액_B0', '정상입금원금_B2M', '할부건수_무이자_3M_R12M',
    '정상청구원금_B5M', '청구금액_R6M', '여유_숙박이용금액', '최대이용금액_일시불_R12M',
    '_1순위업종_이용금액', '잔액_할부_B0M', '할부금액_무이자_3M_R12M','잔액_할부_무이자_B0M'
    ]

cd_baseline = [
    '이용금액_일시불_R3M', '이용금액_R3M_신용체크', '정상입금원금_B0M', '이용금액_오프라인_R6M',
    '정상청구원금_B0M', '이용건수_신용_R6M', '이용금액_오프라인_R3M', '이용건수_일시불_R12M',
    '_1순위카드이용금액', '이용금액_오프라인_B0M', '청구금액_R3M', '이용금액_일시불_R12M',
    '이용금액_R3M_신용', '정상입금원금_B5M', '이용건수_오프라인_B0M', '정상청구원금_B2M',
    '이용건수_신판_R12M', '청구금액_B0', '정상입금원금_B2M', '이용금액_일시불_B0M',
    '정상청구원금_B5M', '청구금액_R6M', '최대이용금액_일시불_R12M', '이용가맹점수',
    '이용건수_신용_R12M', '이용금액_일시불_R6M', '잔액_신판평균한도소진율_r6m',
    '이용금액대', '평잔_일시불_6M', '잔액_신판ca평균한도소진율_r6m',
    'CA이자율_할인전', 'RV일시불이자율_할인전',

    '평잔_카드론_3M', '평잔_카드론_6M', '잔액_카드론_B1M', '잔액_카드론_B2M',
    '잔액_카드론_B3M', '잔액_카드론_B0M', '잔액_카드론_B4M', '잔액_카드론_B5M',
    '카드론이용금액_누적', '최종카드론_대출금액',
    '잔액_신판평균한도소진율_r3m', '잔액_신판최대한도소진율_r3m', '잔액_신판최대한도소진율_r6m',

    '평잔_RV일시불_3M', '평잔_RV일시불_6M', 'RV_평균잔액_R3M',
    '잔액_할부_B0M', '잔액_할부_B1M', '잔액_리볼빙일시불이월_B0M',
    '평잔_할부_3M', '잔액_할부_B2M', '평잔_할부_6M',
    '잔액_일시불_B1M', '잔액_일시불_B2M', '잔액_할부_무이자_B0M',
    '잔액_일시불_B0M', '평잔_일시불_3M'
]

cd_final_features = [
    '정상청구원금_B5M', '이용금액_R3M_신용체크', '정상입금원금_B5M', 
    '최대이용금액_일시불_R12M', '이용가맹점수', '이용금액_오프라인_R6M', 
    '평잔_일시불_6M', '잔액_신판ca평균한도소진율_r6m', 'RV일시불이자율_할인전', '오프라인_소비급등비율', '일시불_최근성지표', 
    '소비_평균대최대비율', '청구_최근성지표', '소진율_차이', '카드집중도', '입금청구비율', '일시불_금액비율'
    ]

pca_cols = [
    'CA이자율_할인전', 'CL이자율_할인전', 'RV_평균잔액_R3M', 'RV일시불이자율_할인전', 
    'RV최소결제비율', 'RV현금서비스이자율_할인전', '방문월수_앱_R6M', '방문일수_앱_B0M', '방문일수_앱_R6M', '방문횟수_앱_B0M', '방문후경과월_앱_R6M', 
    '이용금액_R3M_신용', '이용금액_R3M_신용체크', '이용금액_일시불_B0M', '이용금액대', '일시불ONLY전환가능여부', 
    '잔액_리볼빙일시불이월_B0M', '잔액_일시불_B0M', '잔액_일시불_B1M', '잔액_일시불_B2M', '잔액_카드론_B0M', '잔액_카드론_B1M', '잔액_카드론_B2M', '잔액_카드론_B3M', '잔액_카드론_B4M', 
    '잔액_카드론_B5M', '정상청구원금_B0M', '정상청구원금_B2M', '정상청구원금_B5M', '청구금액_B0', '청구금액_R3M', '청구금액_R6M', '최종카드론_대출금액', 
    '카드론이용금액_누적', '평잔_RV일시불_3M', '평잔_RV일시불_6M', '평잔_일시불_3M', '평잔_일시불_6M', '평잔_카드론_3M', '평잔_카드론_6M', '평잔_할부_3M', 
    '홈페이지_금융건수_R3M', '홈페이지_금융건수_R6M', '홈페이지_선결제건수_R3M', '홈페이지_선결제건수_R6M', '잔액_신판평균한도소진율_r3m']

top_cde = [
    '이용금액_일시불_R3M', '이용금액_R3M_신용체크', '정상입금원금_B0M', '이용금액_오프라인_R6M', '정상청구원금_B0M', '이용건수_신용_R6M', '이용금액_오프라인_R3M','이용건수_일시불_R12M',
    '_1순위카드이용금액', '이용금액_오프라인_B0M', '청구금액_R3M', '이용금액_일시불_R12M', '이용금액_R3M_신용',
    '정상입금원금_B5M', '이용건수_오프라인_B0M', '정상청구원금_B2M', '이용건수_신판_R12M', '청구금액_B0',
    '정상입금원금_B2M', '이용금액_일시불_B0M', '정상청구원금_B5M', '청구금액_R6M', '최대이용금액_일시불_R12M',
    '이용가맹점수', '이용건수_신용_R12M', '이용금액_일시불_R6M'
    ]

#baseline features
baseline_feat = [
    '남녀구분코드', '회원여부_이용가능_카드론', '입회경과개월수_신용', '회원여부_연체', '동의여부_한도증액안내',
    '탈회횟수_누적', '탈회횟수_발급1년이내', '거주시도명', '유효카드수_신용체크', '이용카드수_신용체크',
    '이용금액_R3M_신용체크', '보유여부_해외겸용_본인', '이용여부_3M_해외겸용_본인', '연회비발생카드수_B0M', '기본연회비_B0M',
    '제휴연회비_B0M', '최초한도금액', '카드이용한도금액', 'CA한도금액', '일시상환론한도금액',
    '월상환론한도금액', 'CA이자율_할인전', 'RV일시불이자율_할인전', 'RV현금서비스이자율_할인전', 'RV약정청구율',
    'RV최소결제비율', '한도증액횟수_R12M', '한도증액금액_R12M', '상향가능CA한도금액', '월상환론상향가능한도금액',
    '일시불ONLY전환가능여부', '특별한도보유여부_R3M', '연체감액여부_R3M', '이용건수_신용_B0M', '이용금액_일시불_B0M',
    '이용후경과월_신용', '이용후경과월_일시불', '이용후경과월_체크', '이용금액_해외', '쇼핑_도소매_이용금액',
    '쇼핑_마트_이용금액', '쇼핑_온라인_이용금액', '교통_주유이용금액', '교통_정비이용금액', '여유_숙박이용금액',
    '할부건수_3M_R12M', '할부금액_3M_R12M', 'RP건수_B0M', 'RP건수_통신_B0M', 'RP건수_보험_B0M',
    'RP건수_교통_B0M', 'RP후경과월', '카드론이용건수_누적', '카드론이용금액_누적', '최종카드론_대출이율',
    '최종카드론_대출금액', '이용건수_온라인_R6M', '이용건수_페이_온라인_R6M', '이용건수_A페이_R6M', '이용건수_C페이_R6M',
    '이용건수_D페이_R6M', '이용금액_선결제_R6M', '이용건수_선결제_R6M', '연체입금원금_B0M', '정상청구원금_B5M',
    '선입금원금_B2M', '연속유실적개월수_기본_24M_카드', '승인거절건수_R3M', '승인거절건수_한도초과_R3M', '이용금액대',
    '청구서발송여부_B0', '청구서발송여부_R3M', '청구서발송여부_R6M', '청구금액_B0', '청구금액_R3M',
    '청구금액_R6M', '포인트_마일리지_건별_B0M', '포인트_포인트_건별_B0M', '포인트_마일리지_월적립_B0M', '포인트_포인트_월적립_B0M',
    '마일_적립포인트_R3M', '마일_잔여포인트_B0M', '포인트_이용포인트_R12M', '할인건수_R3M', '할인금액_R3M',
    '할인건수_B0M', '혜택수혜금액_R3M', '포인트_마일리지_환산_B0M', '잔액_일시불_B0M', '잔액_할부_B0M',
    '연체잔액_B0M', '연체원금_최근', '매각잔액_B1M', 'RV_평균잔액_R3M', '연체잔액_RV일시불_B0M',
    '연체잔액_CA_B0M', '평잔_일시불_3M', '평잔_6M', '평잔_카드론_3M', '평잔_CA_3M',
    'IB문의건수_사용승인내역_R6M', 'IB문의건수_선결제_R6M', '당사멤버쉽_방문월수_R6M', '당사멤버쉽_방문횟수_B0M', '당사멤버쉽_방문횟수_R6M',
    '방문월수_PC_R6M', '방문월수_앱_R6M', '방문일수_PC_B0M', '방문일수_PC_R6M', '방문일수_앱_B0M',
    '방문일수_앱_R6M', '방문횟수_PC_B0M', '방문횟수_PC_R6M', '방문횟수_앱_B0M', '방문횟수_앱_R6M',
    '방문후경과월_PC_R6M', '방문후경과월_앱_R6M', '불만제기후경과월_R12M', '상담건수_B0M', '상담건수_R6M',
    '이용메뉴건수_ARS_B0M', '이용메뉴건수_IB_R6M', '인입일수_ARS_B0M', '인입월수_ARS_R6M', '인입일수_IB_B0M',
    '인입월수_IB_R6M', '인입횟수_IB_R6M', '인입후경과월_ARS', '인입후경과월_IB_R6M', '홈페이지_금융건수_R3M',
    '홈페이지_금융건수_R6M', '홈페이지_선결제건수_R3M', '홈페이지_선결제건수_R6M', '증감율_이용건수_할부_전월', '증감율_이용건수_CA_전월',
    '증감율_이용건수_체크_전월', '증감율_이용금액_신용_전월', '증감율_이용금액_할부_전월', '증감율_이용금액_신판_전월', '증감율_이용금액_일시불_전월',
    '증감율_이용건수_신판_분기', '증감율_이용건수_일시불_분기', '증감율_이용금액_신용_분기', '증감율_이용금액_체크_분기', '잔액_신판평균한도소진율_r6m',
    '잔액_신판최대한도소진율_r6m', '잔액_신판ca평균한도소진율_r6m', '잔액_신판ca최대한도소진율_r6m', '변동률_RV일시불평잔', '변동률_할부평잔',
    '변동률_RVCA평잔', '변동률_카드론평잔', '이용카드수_신용', '이용카드수_신용_가족', '이용카드수_체크',
    '이용카드수_체크_가족', '이용금액_R3M_신용', '이용금액_R3M_신용_가족', '이용금액_R3M_체크', '이용금액_R3M_체크_가족',
    'CL이자율_할인전', '상향가능한도금액', '카드이용한도금액_B1M', '카드이용한도금액_B2M', '이용후경과월_신판',
    '이용후경과월_할부', '이용후경과월_할부_유이자', '이용후경과월_할부_무이자', '이용후경과월_부분무이자', '이용후경과월_CA',
    '이용후경과월_카드론', '정상청구원금_B0M', '정상청구원금_B2M', '포인트_마일리지_건별_R3M', '포인트_포인트_건별_R3M',
    '포인트_마일리지_월적립_R3M', '포인트_포인트_월적립_R3M', '포인트_적립포인트_R12M', '포인트_적립포인트_R3M', '포인트_이용포인트_R3M',
    '포인트_잔여포인트_B0M', '잔액_현금서비스_B0M', '잔액_리볼빙일시불이월_B0M', '잔액_리볼빙CA이월_B0M', '잔액_카드론_B0M',
    '잔액_현금서비스_B1M', '잔액_현금서비스_B2M', '잔액_카드론_B1M', '잔액_카드론_B2M', '잔액_카드론_B3M',
    '잔액_카드론_B4M', '잔액_카드론_B5M', '잔액_할부_B1M', '잔액_할부_B2M', '잔액_일시불_B1M',
    '잔액_일시불_B2M', '잔액_할부_유이자_B0M', '잔액_할부_무이자_B0M', '잔액_할부_해외_B0M', '평잔_3M',
    '평잔_일시불_해외_3M', '평잔_RV일시불_3M', '평잔_RV일시불_해외_3M', '평잔_할부_3M', '평잔_할부_해외_3M',
    '평잔_CA_해외_3M', '평잔_일시불_6M', '평잔_일시불_해외_6M', '평잔_RV일시불_6M', '평잔_RV일시불_해외_6M',
    '평잔_할부_6M', '평잔_할부_해외_6M', '평잔_CA_6M', '평잔_CA_해외_6M', '평잔_카드론_6M',
    '잔액_신판평균한도소진율_r3m', '잔액_신판최대한도소진율_r3m', '잔액_신판ca평균한도소진율_r3m', '잔액_신판ca최대한도소진율_r3m'
]

abcd_final_features = [
    '잔액_신판ca최대한도소진율_r3m', '컨택건수_이용유도_청구서_R6M', '방문월수_PC_R6M',
    '이용금액_R3M_신용체크', '최초한도금액', '_1순위업종_이용금액', '할인건수_R3M',
    '포인트_포인트_건별_B0M', '잔액_일시불_B0M', '할인건수_B0M', '불만제기후경과월_R12M',
    '쇼핑_도소매_이용금액', 'RV최소결제비율', 'CA한도금액', '이용건수_선결제_R6M',
    '컨택건수_이용유도_인터넷_R6M', '이용후경과월_신용', '인입일수_ARS_B0M', '거주시도명',
    '이용건수_페이_온라인_R6M', '컨택건수_이용유도_청구서_B0M', '평잔_일시불_해외_6M',
    '최대이용금액_일시불_R12M', '탈회횟수_누적', '이용카드수_신용체크', '이용후경과월_일시불',
    '연체원금_최근', '유효카드수_신용체크', '이용금액_일시불_B0M', '청구서발송여부_B0',
    '청구금액_R3M', '변동률_할부평잔', '회원여부_연체', '선입금원금_B2M', '포인트_이용포인트_R12M',
    '일시불ONLY전환가능여부', '카드론이용건수_누적', '카드론이용금액_누적', '쇼핑_온라인_이용금액',
    '일시상환론한도금액', '증감율_이용건수_할부_전월', '쇼핑_마트_이용금액', '연회비발생카드수_B0M',
    '컨택건수_이용유도_EM_B0M', '평잔_CA_3M', '월상환론한도금액', '증감율_이용금액_신용_분기',
    '증감율_이용건수_CA_전월', 'RV_평균잔액_R3M', '인입월수_IB_R6M', '이용후경과월_체크',
    '이용건수_C페이_R6M', '여유_숙박이용금액', '회원여부_이용가능_카드론', 'RP건수_보험_B0M',
    '탈회횟수_발급1년이내', '홈페이지_선결제건수_R6M', '교통_주유이용금액',
    '컨택건수_신용발급_TM_R6M', '할인금액_R3M', '동의여부_한도증액안내', '이용금액_해외',
    '청구금액_B0', '이용금액_할부_무이자_R3M', '변동률_카드론평잔', '이용건수_A페이_R6M',
    '입회경과개월수_신용', '컨택건수_이용유도_LMS_R6M', '홈페이지_금융건수_R6M',
    '이용금액_R3M_신용', '카드이용한도금액', '교통_정비이용금액', 'RV약정청구율',
    'RP건수_통신_B0M', '혜택수혜금액_R3M', 'RP후경과월', 'RP건수_교통_B0M',
    '정상청구원금_B0M', '컨택건수_이용유도_TM_R6M', '이용금액_할부_무이자_R6M',
    '마일_잔여포인트_B0M', '최종카드론_대출이율', '증감율_이용건수_체크_전월',
    '연체감액여부_R3M', '승인거절건수_한도초과_R3M', '이용금액_선결제_R6M',
    '연속유실적개월수_기본_24M_카드', '이용건수_D페이_R6M', '기본연회비_B0M',
    '당사멤버쉽_방문횟수_R6M', '상향가능CA한도금액', '보유여부_해외겸용_본인',
    '증감율_이용금액_체크_분기', '월상환론상향가능한도금액', '최종카드론_대출금액',
    '청구서발송여부_R6M', '남녀구분코드',

    # ✅ 파생변수 (14개)
    '정상청구원금_증감률_B5M_B2M', '정상청구원금_청구비중_B5M', '정상청구원금_입금비중_B5M',
    '정상청구원금_단기증감률', '정상청구원금_중기증감률', '정상입금_증감률_B0M_B5M',
    '신용체크_이용비율_R3M', '일시불_이용비중', '신용카드_이용건당금액',
    '카드론_잔액_B0M_증가율', '신판CA_평균소진율_비중', '할인비율_R3M',
    '무이자_장단기비율', '이용금액_선결제비율'
]

# 1. 회원정보
features_member = [
    '남녀구분코드',
    '회원여부_이용가능_카드론', '입회경과개월수_신용', '회원여부_연체', '동의여부_한도증액안내',
    '탈회횟수_누적', '탈회횟수_발급1년이내',
    '거주시도명',
    '유효카드수_신용체크',
    '이용카드수_신용체크',
    '이용금액_R3M_신용체크',
    '보유여부_해외겸용_본인', '이용여부_3M_해외겸용_본인',
    '연회비발생카드수_B0M', '기본연회비_B0M', '제휴연회비_B0M'
]
# 2. 신용정보
features_credit = [
    '최초한도금액',
    '카드이용한도금액', 'CA한도금액',
    '일시상환론한도금액', '월상환론한도금액',
    'CA이자율_할인전',
    'RV일시불이자율_할인전', 'RV현금서비스이자율_할인전',
    'RV약정청구율', 'RV최소결제비율',
    '한도증액횟수_R12M',
    '한도증액금액_R12M', '상향가능CA한도금액', '월상환론상향가능한도금액',
    '일시불ONLY전환가능여부', '특별한도보유여부_R3M', '연체감액여부_R3M'
]

# 3. 승인매출정보
features_tx = [
    '이용건수_신용_B0M',
    '이용금액_일시불_B0M', '이용후경과월_신용', '이용후경과월_일시불', '이용후경과월_체크',
    '이용금액_해외', '쇼핑_도소매_이용금액', '쇼핑_마트_이용금액', '쇼핑_온라인_이용금액',
    '교통_주유이용금액', '교통_정비이용금액', '여유_숙박이용금액',
    '할부건수_3M_R12M', '할부금액_3M_R12M',
    'RP건수_B0M', 'RP건수_통신_B0M', 'RP건수_보험_B0M', 'RP건수_교통_B0M', 'RP후경과월',
    '카드론이용건수_누적', '카드론이용금액_누적', '최종카드론_대출이율', '최종카드론_대출금액',
    '이용건수_온라인_R6M', '이용건수_페이_온라인_R6M',
    '이용건수_A페이_R6M', '이용건수_C페이_R6M', '이용건수_D페이_R6M',
    '이용금액_선결제_R6M', '이용건수_선결제_R6M',
    '연체입금원금_B0M', '정상청구원금_B5M', '선입금원금_B2M',
    '연속유실적개월수_기본_24M_카드',
    '승인거절건수_R3M', '승인거절건수_한도초과_R3M',
    '이용금액대'  # 범주형
]
# 4. 청구입금정보
features_bill = [
    '청구서발송여부_B0', '청구서발송여부_R3M', '청구서발송여부_R6M',
    '청구금액_B0', '청구금액_R3M', '청구금액_R6M',
    '포인트_마일리지_건별_B0M', '포인트_포인트_건별_B0M', '포인트_마일리지_월적립_B0M', '포인트_포인트_월적립_B0M',
    '마일_적립포인트_R3M', '마일_잔여포인트_B0M', '포인트_이용포인트_R12M',
    '할인건수_R3M', '할인금액_R3M', '할인건수_B0M',
    '혜택수혜금액_R3M', '포인트_마일리지_환산_B0M'
]

# 5. 잔액정보
features_balance = [
    '잔액_일시불_B0M', '잔액_할부_B0M',
    '연체잔액_B0M',
    '연체원금_최근', '매각잔액_B1M',
    'RV_평균잔액_R3M',
    '연체잔액_RV일시불_B0M', '연체잔액_CA_B0M',
    '평잔_일시불_3M',
    '평잔_6M', '평잔_카드론_3M', '평잔_CA_3M'
]

#6. 채널정보
features_channel = [
'불만제기후경과월_R12M', '방문일수_앱_R6M', '홈페이지_금융건수_R6M','상담건수_R6M','홈페이지_선결제건수_R6M',
'인입월수_IB_R6M','방문일수_앱_B0M','방문횟수_앱_B0M', '인입횟수_IB_R6M', '방문월수_PC_R6M','인입일수_ARS_B0M','당사멤버쉽_방문횟수_R6M'
]
# 7. 마케팅정보
features_marketing = [
'컨택건수_이용유도_EM_B0M', '컨택건수_이용유도_EM_R6M','컨택건수_이용유도_청구서_B0M','컨택건수_이용유도_TM_R6M','컨택건수_신용발급_TM_R6M',
    '컨택건수_이용유도_LMS_R6M','컨택건수_이용유도_인터넷_R6M', '컨택건수_이용유도_청구서_R6M'
]

# 8. 성과정보
features_perf = [
    '증감율_이용건수_할부_전월', '증감율_이용건수_CA_전월', '증감율_이용건수_체크_전월',
    '증감율_이용금액_신용_전월', '증감율_이용금액_할부_전월',
    '증감율_이용금액_신판_전월', '증감율_이용금액_일시불_전월',
    '증감율_이용건수_신판_분기', '증감율_이용건수_일시불_분기',
    '증감율_이용금액_신용_분기', '증감율_이용금액_체크_분기',
    '잔액_신판평균한도소진율_r6m','잔액_신판최대한도소진율_r6m', '잔액_신판ca평균한도소진율_r6m', '잔액_신판ca최대한도소진율_r6m',
    '변동률_RV일시불평잔', '변동률_할부평잔', '변동률_RVCA평잔', '변동률_카드론평잔'
]

# A,B 상관계수 높은 변수 & C, D, E 상관계수 높은 변수 기반 컬럼 선정
related_cols = ['할부금액_3M_R12M', '이용금액_할부_무이자_R12M', 
                '이용건수_할부_무이자_R12M', '정상입금원금_B0M', 
                '이용금액_오프라인_R6M', '정상청구원금_B0M', 
                '이용금액_오프라인_R3M', '_1순위카드이용금액', 
                '평잔_일시불_해외_6M', '승인거절건수_입력오류_R3M', 
                '청구금액_R3M', '이용금액_일시불_R12M', 
                '이용금액_할부_무이자_R3M', '이용금액_할부_무이자_R6M', 
                '정상입금원금_B5M', '이용금액_할부_R12M', '마일_적립포인트_R3M', 
                '정상청구원금_B2M', '포인트_마일리지_환산_B0M', '청구금액_B0', 
                '정상입금원금_B2M', '할부건수_무이자_3M_R12M', '정상청구원금_B5M', 
                '청구금액_R6M', '여유_숙박이용금액', '최대이용금액_일시불_R12M', 
                '_1순위업종_이용금액', '잔액_할부_B0M', '할부금액_무이자_3M_R12M', 
                '잔액_할부_무이자_B0M', '이용금액_일시불_R3M', '이용금액_R3M_신용체크', 
                '이용건수_신용_R6M', '이용건수_일시불_R12M', '이용금액_오프라인_B0M', 
                '이용금액_R3M_신용', '이용건수_오프라인_B0M', '이용건수_신판_R12M', 
                '이용금액_일시불_B0M', '이용가맹점수', '이용건수_신용_R12M', '이용금액_일시불_R6M']

selected_cols=(ab_feat + top_cde + pca_cols)
selected_cols = list(dict.fromkeys(selected_cols))

selected_all=(ab_feat + top_cde + pca_cols + baseline_feat)
selected_all = list(dict.fromkeys(selected_all))

a_to_e_base_features = list(dict.fromkeys(
    features_member +
    features_credit +
    features_tx +
    features_bill +
    features_balance +
    features_channel +
    features_marketing +
    features_perf +
    related_cols
))

stage_feature_map = {
    "base": baseline_feat,
    "cd_base": cd_baseline,
    "cd" : cd_baseline,
    "ab" : ab_feat,
    "e" : selected_all,
    "abcd" : selected_cols
}

"""
from feature_selector import stage_feature_map

# '__' 단계의 피처만 불러오기
selected_features = stage_feature_map['cd']
입력 X : baseline (전체 피처)
"""
